package view;

import controller.AtendimentosController;
import controller.PetsController; // Para buscar o nome do Pet
import controller.MedicoController; // Para buscar o nome do Médico
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.AtendimentosModel;
import model.PetsModel;
import model.MedicoModel; // Tipo MedicoModel

/**
 *
 * @author italo (Adaptado por Gemini para ListarTodosAtendimentosView)
 */
public class ListarTodosAtendimentosView extends javax.swing.JInternalFrame {

    // Listas para buscar nomes por ID
    private ArrayList<PetsModel> listaTodosPets; 
    private ArrayList<MedicoModel> listaTodosMedicos; 
    private SimpleDateFormat dateFormatExibicao = new SimpleDateFormat("dd/MM/yyyy HH:mm"); // Formato para exibir a data

    /**
     * Creates new form ListarTodosAtendimentosView
     */
    public ListarTodosAtendimentosView() {
        initComponents();
        carregarDadosAuxiliares(); // Carrega listas de pets e médicos
        preencherTabelaAtendimentos(); // Preenche a tabela com todos os atendimentos
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtAtendimentos = new javax.swing.JTable();
        jbFechar = new javax.swing.JButton();

        jtAtendimentos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Codigo", "Pet", "Medico", "Data", "status", "Motivo", "Diagnostico"
            }
        ));
        jtAtendimentos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtAtendimentosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtAtendimentos);

        jbFechar.setText("Fechar");
        jbFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFecharActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(280, 280, 280)
                .addComponent(jbFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(459, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jbFechar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 557, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtAtendimentosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAtendimentosMouseClicked
        // Lógica para abrir EditarAtendimentoView
        int linhaSelecionada = jtAtendimentos.getSelectedRow();
        if (linhaSelecionada != -1) {
            try {
                // Obtém o Código do Atendimento da primeira coluna da tabela
                int idAtendimento = Integer.parseInt(jtAtendimentos.getValueAt(linhaSelecionada, 0).toString());

                // Cria uma instância da EditarAtendimentoView
                EditarAtendimentoView editarAtendimentoView = new EditarAtendimentoView();
                
                // Obtém o JDesktopPane pai
                javax.swing.JDesktopPane desktopPane = getDesktopPane();
                if (desktopPane != null) {
                    desktopPane.add(editarAtendimentoView);
                    // Centraliza a JInternalFrame no JDesktopPane
                    editarAtendimentoView.setLocation(
                        (desktopPane.getWidth() - editarAtendimentoView.getWidth()) / 2,
                        (desktopPane.getHeight() - editarAtendimentoView.getHeight()) / 2
                    );
                } else {
                    JOptionPane.showMessageDialog(this, "Erro: Esta view deve ser aberta dentro de um JDesktopPane.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                // Torna a view visível
                editarAtendimentoView.setVisible(true);
                try {
                    editarAtendimentoView.setSelected(true); // Traz para frente
                    editarAtendimentoView.toFront();
                } catch (java.beans.PropertyVetoException e) {
                    e.printStackTrace();
                }
                
                // Preenche o campo de código na EditarAtendimentoView e aciona a pesquisa
                // A EditarAtendimentoView não tem um método público para carregar por ID diretamente,
                // então simulamos a digitação e clique no botão pesquisar.
                // Isso é menos ideal, mas funciona com a estrutura atual.
                // Uma solução melhor seria adicionar um método público como 'carregarAtendimentoPorId(int id)'
                // na EditarAtendimentoView.
                editarAtendimentoView.carregarAtendimentoParaEdicao(idAtendimento); // Simula o clique no botão pesquisar (jbPesquisar deve ser público)

                // Opcional: Fechar esta view após abrir a de edição
                // dispose(); 

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Erro ao obter o código do atendimento: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jtAtendimentosMouseClicked

    private void jbFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFecharActionPerformed
        dispose(); // Fecha a janela
    }//GEN-LAST:event_jbFecharActionPerformed

    // Métodos Auxiliares
    
    // Carrega todas as listas de apoio (Pets, Médicos)
    private void carregarDadosAuxiliares() {
        PetsController petsController = new PetsController();
        listaTodosPets = petsController.selecionarTodos();

        MedicoController medicosController = new MedicoController();
        listaTodosMedicos = medicosController.selecionarTodos();
    }
    
    // Método para preencher a tabela de todos os atendimentos
    private void preencherTabelaAtendimentos() {
        AtendimentosController atendimentoController = new AtendimentosController();
        ArrayList<AtendimentosModel> listaAtendimentos = atendimentoController.selecionarTodos();
        DefaultTableModel modeloTabela = (DefaultTableModel) jtAtendimentos.getModel();
        modeloTabela.setRowCount(0); // Limpa a tabela

        if (listaAtendimentos.isEmpty()) {
            // Opcional: JOptionPane.showMessageDialog(this, "Nenhum atendimento cadastrado!", "Informação", JOptionPane.INFORMATION_MESSAGE);
        } else {
            for (AtendimentosModel a : listaAtendimentos) {
                // Encontra nomes de Pet e Médico para exibir na tabela
                String nomePet = encontrarNomePetPorId(a.getPet_id());
                String nomeMedico = encontrarNomeMedicoPorId(a.getMedico_id());

                modeloTabela.addRow(new Object[]{
                    a.getId(),
                    nomePet,
                    nomeMedico,
                    a.getData(), // Já vem formatado como String do Controller
                    a.getStatus(),
                    a.getMotivo_visita(),
                    a.getDiagnostico_final()
                });
            }
        }
    }

    // Métodos para encontrar nomes por ID (similar aos da EditarAtendimentoView)
    private String encontrarNomePetPorId(int id) {
        if (listaTodosPets == null) return "Desconhecido";
        for (PetsModel p : listaTodosPets) {
            if (p.getPetId() == id) {
                return p.getNome();
            }
        }
        return "Desconhecido";
    }

    private String encontrarNomeMedicoPorId(int id) {
        if (listaTodosMedicos == null) return "Desconhecido";
        for (MedicoModel m : listaTodosMedicos) {
            if (m.getIdMedico() == id) {
                return m.getNome();
            }
        }
        return "Desconhecido";
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbFechar;
    private javax.swing.JTable jtAtendimentos;
    // End of variables declaration//GEN-END:variables
}