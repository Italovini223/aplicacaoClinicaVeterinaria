package view;

import controller.AtendimentosController;
import controller.MedicoController;
import controller.PetsController;
import controller.ProcedimentoController;
import controller.ServicosController;
import java.text.SimpleDateFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import model.AtendimentosModel;
import model.MedicoModel; // Tipo MedicoModel (singular)
import model.PetsModel;
import model.ProcedimentoModel;
import model.ServicosModel;

/**
 *
 * @author italo (Versão Final Completa e Corrigida por Gemini)
 */
public class EditarAtendimentoView extends javax.swing.JInternalFrame {

    // Listas para preencher os ComboBoxes e para lógica
    private ArrayList<PetsModel> listaPets;
    private ArrayList<MedicoModel> listaMedicos; // Tipo MedicoModel
    private ArrayList<ProcedimentoModel> listaProcedimentos; // Para ServicoView e preencherTabelaServicosDoAtendimento
    
    // Lista de serviços carregados/adicionados para o atendimento que está sendo editado
    private ArrayList<ServicosModel> listaServicosDoAtendimento; 
    
    // Formatador para a máscara de data e para conversão
    private SimpleDateFormat dateFormatEntrada = new SimpleDateFormat("dd/MM/yyyy HH:mm"); 
    
    // Variável para guardar o ID do atendimento atual quando pesquisado/carregado
    private int atendimentoIdAtual = 0; 

    // VARIÁVEIS ADICIONADAS MANUALMENTE E INICIALIZADAS NO CONSTRUTOR OU PELO NETBEANS NO INITCOMPONENTS
    private javax.swing.JLabel jLabel1_data; // Label para a data (apenas para consistência se você for usar no designer)
    private javax.swing.JLabel jLabel2_status; // Label para o status (apenas para consistência se você for usar no designer)
  


    /**
     * Creates new form EditarAtendimentoView
     */
    public EditarAtendimentoView() {
        // Inicializa o jfmData com a máscara ANTES de initComponents()
          try {
            MaskFormatter mf = new MaskFormatter("##/##/#### ##:##");
            jfmData = new javax.swing.JFormattedTextField(mf); 
        } catch (ParseException e) {
            e.printStackTrace(); 
            jfmData = new javax.swing.JFormattedTextField(); 
        }
        
        // Inicializa as JLabels e JComboBox aqui, se não estiverem no initComponents
        // Se você adicionou elas no designer e renomeou as variáveis, initComponents() já fará isso.
        // Se não, elas precisam ser inicializadas aqui:
        // jLabel1_data = new javax.swing.JLabel("Data (DD/MM/AAAA HH:MM)");
        // jLabel2_status = new javax.swing.JLabel("Status");
        // jcbStatus = new javax.swing.JComboBox<>();
        
        initComponents(); // MÉTODO GERADO PELO DESIGNER - MANTENHA ESTE MÉTODO E SUA ESTRUTURA

        // Inicializa as listas após initComponents() para garantir que os componentes GUI estejam prontos
        listaServicosDoAtendimento = new ArrayList<>(); 
        listaProcedimentos = new ArrayList<>(); // Para buscar nomes de procedimentos
        
        // Preenche ComboBoxes e inicializa o estado dos componentes
        preencherComboBoxes();
        inicializarComponentes();
        preencherTabelaServicosDoAtendimento(); // Preenche a tabela de serviços inicialmente vazia
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jtxCodigo = new javax.swing.JTextField();
        jcbPet = new javax.swing.JComboBox<>();
        jcbMedicos = new javax.swing.JComboBox<>();
        jbNovoServico = new javax.swing.JToggleButton();
        jbRemoverServico = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaMotivo = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaDiagnostico = new javax.swing.JTextArea();
        jbPesquisar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtAtendimentosServicos = new javax.swing.JTable();
        jbExcluir = new javax.swing.JButton();
        jbFechar = new javax.swing.JButton();
        jbEditar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jfmData = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jcbStatus = new javax.swing.JComboBox<>();

        jLabel3.setText("Codigo");

        jLabel4.setText("Pet");

        jLabel5.setText("Medico");

        jLabel6.setText("Serviços");

        jLabel7.setText("Diagnostico");

        jLabel8.setText("Motivo");

        jcbPet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jcbMedicos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jbNovoServico.setText("Adicionar");
        jbNovoServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoServicoActionPerformed(evt);
            }
        });

        jbRemoverServico.setText("Remover");
        jbRemoverServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverServicoActionPerformed(evt);
            }
        });

        jtaMotivo.setColumns(20);
        jtaMotivo.setRows(5);
        jScrollPane1.setViewportView(jtaMotivo);

        jtaDiagnostico.setColumns(20);
        jtaDiagnostico.setRows(5);
        jScrollPane2.setViewportView(jtaDiagnostico);

        jbPesquisar.setText("Pesquisar");
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });

        jtAtendimentosServicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Codigo", "Procedimento", "Valor cobrado"
            }
        ));
        jtAtendimentosServicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtAtendimentosServicosMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jtAtendimentosServicos);

        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbFechar.setText("Fechar");
        jbFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFecharActionPerformed(evt);
            }
        });

        jbEditar.setText("Editar");
        jbEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEditarActionPerformed(evt);
            }
        });

        jLabel1.setText("Data");

        jfmData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jfmDataActionPerformed(evt);
            }
        });

        jLabel2.setText("Status");

        jcbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 189, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbNovoServico, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jbRemoverServico, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jcbMedicos, 0, 121, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jtxCodigo)
                                            .addComponent(jcbPet, 0, 122, Short.MAX_VALUE))))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jfmData, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jbPesquisar)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jcbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(202, 202, 202)))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(508, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jbEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jtxCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jcbPet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jfmData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jcbMedicos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jcbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jbNovoServico)
                    .addComponent(jbRemoverServico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(51, 51, 51)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbExcluir)
                    .addComponent(jbFechar)
                    .addComponent(jbEditar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jtAtendimentosServicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAtendimentosServicosMouseClicked
        // Lógica para selecionar um serviço na tabela (se quiser editar ou remover)
    }//GEN-LAST:event_jtAtendimentosServicosMouseClicked

    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed
        // 1. Validar campo de código
        if (jtxCodigo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha o código do Atendimento para pesquisar!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int idAtendimento = Integer.parseInt(jtxCodigo.getText());
            
            // 2. Buscar Atendimento Principal
            AtendimentosModel atendimento = new AtendimentosModel();
            atendimento.setId(idAtendimento);
            AtendimentosController atendimentoController = new AtendimentosController();
            AtendimentosModel atendimentoEncontrado = atendimentoController.selecionar(atendimento);

            if (atendimentoEncontrado != null) {
                // Armazena o ID do atendimento atual
                atendimentoIdAtual = atendimentoEncontrado.getId();

                // Preencher campos principais do atendimento
                jcbPet.setSelectedItem(encontrarNomePetPorId(atendimentoEncontrado.getPet_id()));
                jcbMedicos.setSelectedItem(encontrarNomeMedicoPorId(atendimentoEncontrado.getMedico_id()));
                jfmData.setText(atendimentoEncontrado.getData()); // Data formatada
                jcbStatus.setSelectedItem(atendimentoEncontrado.getStatus());
                jtaMotivo.setText(atendimentoEncontrado.getMotivo_visita());
                jtaDiagnostico.setText(atendimentoEncontrado.getDiagnostico_final());
                
                // 3. Carregar e exibir serviços existentes do atendimento
                ServicosController servicosController = new ServicosController();
                listaServicosDoAtendimento = servicosController.selecionarServicosPorAtendimentoId(atendimentoIdAtual);
                preencherTabelaServicosDoAtendimento();

                // Habilitar/Desabilitar componentes
                jtxCodigo.setEditable(false); // Código não editável após pesquisa
                jcbPet.setEnabled(true);
                jcbMedicos.setEnabled(true);
                jfmData.setEditable(true);
                jcbStatus.setEnabled(true);
                jtaMotivo.setEditable(true);
                jtaDiagnostico.setEditable(true);

                jbNovoServico.setEnabled(true); // Pode adicionar mais serviços
                jbRemoverServico.setEnabled(true); // Pode remover serviços

                jbEditar.setEnabled(true); // Habilita o botão Editar
                jbExcluir.setEnabled(true); // Habilita o botão Excluir
                jbPesquisar.setEnabled(true); // Mantém pesquisar
                // jbNovo (se existir) deve ser desabilitado se estiver editando
            } else {
                JOptionPane.showMessageDialog(this, "Atendimento não encontrado!", "Pesquisa", JOptionPane.INFORMATION_MESSAGE);
                limparCamposAtendimento();
                inicializarComponentes(); // Reseta a UI se não encontrar
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Código do Atendimento inválido. Digite apenas números!", "Erro de Formato", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbPesquisarActionPerformed

    private void jbRemoverServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverServicoActionPerformed
        int linhaSelecionada = jtAtendimentosServicos.getSelectedRow();
        if (linhaSelecionada != -1) {
            ServicosModel servicoParaRemover = listaServicosDoAtendimento.get(linhaSelecionada);
            
            // Pergunta de confirmação
            int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja remover este serviço?", "Confirmar Remoção", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.NO_OPTION) {
                return;
            }

            // Se o serviço tem um ID (já está no banco), tenta excluir do banco
            if (servicoParaRemover.getId() != 0) { 
                ServicosController servicosController = new ServicosController();
                if (servicosController.excluir(servicoParaRemover)) {
                    JOptionPane.showMessageDialog(this, "Serviço removido do banco de dados!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Erro ao remover serviço do banco de dados!", "Erro", JOptionPane.ERROR_MESSAGE);
                    // Não remove da lista temporária se falhou no BD
                    return; 
                }
            }
            
            // Remove da lista temporária e atualiza a tabela
            listaServicosDoAtendimento.remove(linhaSelecionada);
            preencherTabelaServicosDoAtendimento();
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um serviço para remover!", "Remover Serviço", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbRemoverServicoActionPerformed

    private void jbNovoServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoServicoActionPerformed
        // 1. Instancia o diálogo de serviço (ServicoView)
        ServicoView dialogServico = new ServicoView();
        
        // 2. Adiciona ServicoView ao JDesktopPane da janela principal
        javax.swing.JDesktopPane desktopPane = getDesktopPane();
        if (desktopPane != null) {
            desktopPane.add(dialogServico);
            // Centraliza o JInternalFrame no JDesktopPane
            dialogServico.setLocation(
                (desktopPane.getWidth() - dialogServico.getWidth()) / 2,
                (desktopPane.getHeight() - dialogServico.getHeight()) / 2
            );
        } else {
            JOptionPane.showMessageDialog(this, "Esta view deve ser aberta dentro de um JDesktopPane.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 3. Torna a view de serviço visível e a traz para frente
        dialogServico.setVisible(true);
        try {
            dialogServico.setSelected(true);
            dialogServico.toFront();
        } catch (java.beans.PropertyVetoException e) {
            e.printStackTrace();
        }
        
        // 4. Lógica de retorno para JInternalFrame: usa PropertyChangeListener
        // Adiciona um listener para detectar quando a janela é fechada
        dialogServico.addPropertyChangeListener(propertyChangeEvent -> { 
            if (propertyChangeEvent.getPropertyName().equals("closed") && ((Boolean) propertyChangeEvent.getNewValue())) {
                ServicosModel servicoAdicionado = dialogServico.getServicoAdicionado();
                if (servicoAdicionado != null) {
                    listaServicosDoAtendimento.add(servicoAdicionado); // Adiciona o serviço à lista
                    preencherTabelaServicosDoAtendimento(); // Atualiza a tabela
                }
            }
        });
    }//GEN-LAST:event_jbNovoServicoActionPerformed

    private void jbEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEditarActionPerformed
        // Valida se um atendimento foi selecionado para edição
        if (atendimentoIdAtual == 0) { // atendimentoIdAtual é 0 se não foi pesquisado/selecionado
            JOptionPane.showMessageDialog(this, "Pesquise ou selecione um Atendimento para editar!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 1. Obter dados dos campos da UI
        String nomePetSelecionado = (String) jcbPet.getSelectedItem();
        int petId = 0;
        if (nomePetSelecionado != null && listaPets != null && !nomePetSelecionado.equals("Selecione um Pet")) {
            for (PetsModel p : listaPets) {
                if (p.getNome().equals(nomePetSelecionado)) {
                    petId = p.getPetId();
                    break;
                }
            }
        }
        
        String nomeMedicoSelecionado = (String) jcbMedicos.getSelectedItem(); // jcbMedicos
        int medicoId = 0;
        if (nomeMedicoSelecionado != null && listaMedicos != null && !nomeMedicoSelecionado.equals("Selecione um Médico")) {
            for (MedicoModel m : listaMedicos) {
                if (m.getNome().equals(nomeMedicoSelecionado)) {
                    medicoId = m.getIdMedico();
                    break;
                }
            }
        }

        String dataHoraStr = jfmData.getText();
        String status = (String) jcbStatus.getSelectedItem(); // jcbStatus
        String motivoVisita = jtaMotivo.getText();
        String diagnosticoFinal = jtaDiagnostico.getText();

        // 2. Validações básicas
        if (petId == 0 || medicoId == 0 || dataHoraStr.isEmpty() || status == null || status.equals("Selecione o Status") || motivoVisita.isEmpty() || diagnosticoFinal.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos obrigatórios!", "Erro de Validação", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            // Converte a data e hora do campo formatado para o formato do Controller
            Date dataUtil = dateFormatEntrada.parse(dataHoraStr);
            
            // 3. Cria AtendimentosModel e preenche com os dados da UI
            AtendimentosModel atendimento = new AtendimentosModel();
            atendimento.setId(atendimentoIdAtual); // Define o ID para a edição
            atendimento.setPet_id(petId);
            atendimento.setMedico_id(medicoId);
            atendimento.setData(dateFormatEntrada.format(dataUtil)); // Passa a data como String
            atendimento.setStatus(status);
            atendimento.setMotivo_visita(motivoVisita);
            atendimento.setDiagnostico_final(diagnosticoFinal);

            // 4. Chama o Controller para editar o atendimento principal
            AtendimentosController atendimentoController = new AtendimentosController();
            if (atendimentoController.editar(atendimento)) {
                JOptionPane.showMessageDialog(this, "Atendimento principal atualizado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                
                // 5. Lógica para atualizar/inserir/excluir serviços (mais complexo)
                // Para este exemplo, vamos simplificar:
                // Serviços que foram adicionados via 'Novo Serviço' são salvos.
                // Serviços que foram removidos via 'Remover Serviço' já foram excluídos do banco (se tivessem ID).
                // Isso significa que esta View gerencia os serviços como uma lista de ADIÇÕES/REMOÇÕES,
                // mas não de EDIÇÕES de serviços existentes (valor cobrado).
                
                // Recarrega os serviços após a edição (para garantir que a tabela reflita o banco)
                ServicosController servicosController = new ServicosController();
                listaServicosDoAtendimento = servicosController.selecionarServicosPorAtendimentoId(atendimentoIdAtual);
                preencherTabelaServicosDoAtendimento();

                inicializarComponentes(); // Reseta o estado da UI
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao atualizar atendimento principal!", "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Formato de data e hora inválido. Use DD/MM/AAAA HH:MM.", "Erro de Formato", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Erro de formato em algum campo numérico.", "Erro de Formato", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbEditarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        // 1. Validar se um atendimento está selecionado
        if (atendimentoIdAtual == 0) {
            JOptionPane.showMessageDialog(this, "Pesquise ou selecione um Atendimento para excluir!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, "Tem certeza que deseja excluir este Atendimento e todos os seus serviços?", "Confirmar Exclusão", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.NO_OPTION) {
            return;
        }

        try {
            // 2. Excluir todos os serviços associados primeiro
            ServicosController servicosController = new ServicosController();
            // Para garantir, vamos buscar todos os serviços para este atendimento
            ArrayList<ServicosModel> servicosParaExcluir = servicosController.selecionarServicosPorAtendimentoId(atendimentoIdAtual);
            boolean todosServicosExcluidos = true;
            for (ServicosModel servico : servicosParaExcluir) {
                if (!servicosController.excluir(servico)) {
                    todosServicosExcluidos = false;
                    break;
                }
            }

            if (!todosServicosExcluidos) {
                JOptionPane.showMessageDialog(this, "Erro ao excluir todos os serviços do atendimento. Não foi possível excluir o atendimento principal.", "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            // 3. Excluir o atendimento principal
            AtendimentosModel atendimento = new AtendimentosModel();
            atendimento.setId(atendimentoIdAtual);
            AtendimentosController atendimentoController = new AtendimentosController();

            if (atendimentoController.excluir(atendimento)) {
                JOptionPane.showMessageDialog(this, "Atendimento e serviços excluídos com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                limparCamposAtendimento();
                inicializarComponentes(); // Reseta a UI
            } else {
                JOptionPane.showMessageDialog(this, "Erro ao excluir atendimento principal!", "Erro", JOptionPane.ERROR_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao tentar excluir o atendimento: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jbFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFecharActionPerformed
        dispose();
    }//GEN-LAST:event_jbFecharActionPerformed

    private void jfmDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jfmDataActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jfmDataActionPerformed


    // Métodos auxiliares
    private void preencherComboBoxes() {
        // Pets ComboBox
        PetsController petsController = new PetsController();
        listaPets = petsController.selecionarTodos();
        DefaultComboBoxModel<String> modelPets = new DefaultComboBoxModel<>();
        modelPets.addElement("Selecione um Pet");
        if (listaPets != null) {
            for (PetsModel p : listaPets) {
                modelPets.addElement(p.getNome());
            }
        }
        jcbPet.setModel(modelPets);

        // Médicos ComboBox
        MedicoController medicosController = new MedicoController();
        listaMedicos = medicosController.selecionarTodos();
        DefaultComboBoxModel<String> modelMedicos = new DefaultComboBoxModel<>();
        modelMedicos.addElement("Selecione um Médico");
        if (listaMedicos != null) {
            for (MedicoModel m : listaMedicos) { // Tipo MedicoModel
                modelMedicos.addElement(m.getNome());
            }
        }
        jcbMedicos.setModel(modelMedicos); // jcbMedicos

        // Status ComboBox (jcbStatus)
        DefaultComboBoxModel<String> modelStatus = new DefaultComboBoxModel<>();
        modelStatus.addElement("Selecione o Status");
        modelStatus.addElement("Pendente");
        modelStatus.addElement("Em Andamento");
        modelStatus.addElement("Concluído");
        modelStatus.addElement("Cancelado");
        jcbStatus.setModel(modelStatus); // Usa jcbStatus
    }

    private void inicializarComponentes() {
        jtxCodigo.setText("");
        jtxCodigo.setEditable(true); // Código é editável para pesquisa
        atendimentoIdAtual = 0; // Reseta o ID do atendimento atual
        
        jcbPet.setSelectedIndex(0);
        jcbPet.setEnabled(false);

        jcbMedicos.setSelectedIndex(0); // jcbMedicos
        jcbMedicos.setEnabled(false);

        jfmData.setText("");
        jfmData.setEditable(false);

        jcbStatus.setSelectedIndex(0); // jcbStatus
        jcbStatus.setEnabled(false);

        jtaMotivo.setText("");
        jtaMotivo.setEditable(false);

        jtaDiagnostico.setText("");
        jtaDiagnostico.setEditable(false);

        jbNovoServico.setEnabled(false);
        jbRemoverServico.setEnabled(false);
        
        jbEditar.setEnabled(false); // Botão Editar desabilitado no início
        jbExcluir.setEnabled(false); // Botão Excluir desabilitado no início
        jbPesquisar.setEnabled(true); // Pesquisar habilitado
    }

    private void limparCamposAtendimento() {
        jtxCodigo.setText("");
        jcbPet.setSelectedIndex(0);
        jcbMedicos.setSelectedIndex(0); // jcbMedicos
        jfmData.setText("");
        jcbStatus.setSelectedIndex(0); // jcbStatus
        jtaMotivo.setText("");
        jtaDiagnostico.setText("");
        listaServicosDoAtendimento.clear(); 
        preencherTabelaServicosDoAtendimento(); 
        atendimentoIdAtual = 0; // Limpa o ID do atendimento atual
    }

    private void preencherTabelaServicosDoAtendimento() {
        DefaultTableModel modeloTabela = (DefaultTableModel) jtAtendimentosServicos.getModel();
        modeloTabela.setRowCount(0); 

        ProcedimentoController procController = new ProcedimentoController(); 

        if (listaServicosDoAtendimento != null) {
            for (ServicosModel servico : listaServicosDoAtendimento) {
                String nomeProcedimento = "Procedimento Desconhecido";
                // Busca o nome do procedimento usando o id_procedimento
                ProcedimentoModel procBusca = new ProcedimentoModel();
                procBusca.setIdProcedimento(servico.getId_procedimento());
                ProcedimentoModel procEncontrado = procController.selecionar(procBusca);
                
                if (procEncontrado != null) {
                    nomeProcedimento = procEncontrado.getNome();
                }

                modeloTabela.addRow(new Object[]{
                    servico.getId(), // ID do serviço (pode ser 0 se novo, ou o ID do BD se existente)
                    nomeProcedimento,
                    String.format("%.2f", servico.getValor_cobrado()) 
                });
            }
        }
    }
    
    // Métodos auxiliares para encontrar IDs/Nomes (iguais aos da NovoAtendimentoView)
    private PetsModel encontrarPetPorNome(String nome) {
        if (listaPets == null) return null;
        for (PetsModel p : listaPets) {
            if (p.getNome().equals(nome)) {
                return p;
            }
        }
        return null;
    }
    private String encontrarNomePetPorId(int id) {
        if (listaPets == null) return "Desconhecido";
        for (PetsModel p : listaPets) {
            if (p.getPetId() == id) {
                return p.getNome();
            }
        }
        return "Desconhecido";
    }

    private MedicoModel encontrarMedicoPorNome(String nome) { 
        if (listaMedicos == null) return null;
        for (MedicoModel m : listaMedicos) { 
            if (m.getNome().equals(nome)) {
                return m;
            }
        }
        return null;
    }
    private String encontrarNomeMedicoPorId(int id) {
        if (listaMedicos == null) return "Desconhecido";
        for (MedicoModel m : listaMedicos) {
            if (m.getIdMedico() == id) {
                return m.getNome();
            }
        }
        return "Desconhecido";
    }

    public void carregarAtendimentoParaEdicao(int idAtendimento) {
        jtxCodigo.setText(String.valueOf(idAtendimento));
        jbPesquisar.doClick(); // Simula o clique no botão Pesquisar
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbEditar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JButton jbFechar;
    private javax.swing.JToggleButton jbNovoServico;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JToggleButton jbRemoverServico;
    private javax.swing.JComboBox<String> jcbMedicos;
    private javax.swing.JComboBox<String> jcbPet;
    private javax.swing.JComboBox<String> jcbStatus;
    private javax.swing.JFormattedTextField jfmData;
    private javax.swing.JTable jtAtendimentosServicos;
    private javax.swing.JTextArea jtaDiagnostico;
    private javax.swing.JTextArea jtaMotivo;
    private javax.swing.JTextField jtxCodigo;
    // End of variables declaration//GEN-END:variables
    // Variáveis adicionadas manualmente para corresponder ao VendaModel/Atendimento
    // Estas precisam ser declaradas e possivelmente inicializadas no construtor
    // e adicionadas ao layout no DESIGNER.
    // private javax.swing.JFormattedTextField jfmData; // Declarada acima, no topo da classe
    // private javax.swing.JLabel jLabel1_data; // Declarada acima
    // private javax.swing.JLabel jLabel2_status; // Declarada acima
    // private javax.swing.JComboBox<String> jcbStatus; // Declarada acima
}