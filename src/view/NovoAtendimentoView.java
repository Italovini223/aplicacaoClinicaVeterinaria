package view;

import controller.AtendimentosController;
import controller.MedicoController;
import controller.PetsController;
import controller.ProcedimentoController;
import controller.ServicosController;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.MaskFormatter;
import model.AtendimentosModel;
import model.MedicoModel;
import model.PetsModel;
import model.ProcedimentoModel;
import model.ServicosModel;

/**
 *
 * @author italo (Versão Final Completa por Gemini)
 */
public class NovoAtendimentoView extends javax.swing.JInternalFrame {

    private ArrayList<PetsModel> listaPets;
    private ArrayList<MedicoModel> listaMedicos;
    private ArrayList<ProcedimentoModel> listaProcedimentos; 
    private ArrayList<ServicosModel> listaServicosTemporarios; 
    private SimpleDateFormat dateFormatEntrada = new SimpleDateFormat("dd/MM/yyyy HH:mm"); 

    /**
     * Creates new form NovoAtendimentoView
     */
    public NovoAtendimentoView() {
        try {
            MaskFormatter mf = new MaskFormatter("##/##/#### ##:##");
            jfmData = new javax.swing.JFormattedTextField(mf); 
        } catch (ParseException e) {
            e.printStackTrace(); 
            jfmData = new javax.swing.JFormattedTextField(); 
        }
        
        initComponents(); 
        
        listaServicosTemporarios = new ArrayList<>(); 
        listaProcedimentos = new ArrayList<>(); 
        
        preencherComboBoxes();
        inicializarComponentes();
        preencherTabelaServicosTemporarios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jtxCodigo = new javax.swing.JTextField();
        jcbPet = new javax.swing.JComboBox<>();
        jcbMedico = new javax.swing.JComboBox<>();
        jfmData = new javax.swing.JFormattedTextField();
        jComboBox1 = new javax.swing.JComboBox<>();
        jbNovoServico = new javax.swing.JToggleButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtAtendimentosServicos = new javax.swing.JTable();
        jcbNovo = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jbFechar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtaDiagnostico = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtaMotivo = new javax.swing.JTextArea();
        jbRemoverServico = new javax.swing.JButton();

        jLabel1.setText("Codigo");

        jLabel2.setText("Pet");

        jLabel3.setText("Medico");

        jLabel4.setText("Data");

        jLabel5.setText("Status");

        jLabel6.setText("Motivo");

        jLabel7.setText("Diagnostico");

        jcbPet.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jcbMedico.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcbMedico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbMedicoActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jbNovoServico.setText("Adicionar");
        jbNovoServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoServicoActionPerformed(evt);
            }
        });

        jLabel8.setText("serviço");

        jtAtendimentosServicos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Codigo", "Procedimento", "Valor cobrado"
            }
        ));
        jtAtendimentosServicos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtAtendimentosServicosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtAtendimentosServicos);

        jcbNovo.setText("Novo");
        jcbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbNovoActionPerformed(evt);
            }
        });

        jbSalvar.setText("Salvar");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });

        jbFechar.setText("Fechar");
        jbFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFecharActionPerformed(evt);
            }
        });

        jtaDiagnostico.setColumns(20);
        jtaDiagnostico.setRows(5);
        jScrollPane2.setViewportView(jtaDiagnostico);

        jtaMotivo.setColumns(20);
        jtaMotivo.setRows(5);
        jScrollPane3.setViewportView(jtaMotivo);

        jbRemoverServico.setText("Remover ");
        jbRemoverServico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRemoverServicoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jcbNovo, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(173, 173, 173)
                        .addComponent(jbSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(138, 138, 138)
                        .addComponent(jbFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbNovoServico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jcbPet, 0, 146, Short.MAX_VALUE)
                                        .addComponent(jtxCodigo)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jcbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jfmData, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jbRemoverServico, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 793, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(189, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jtxCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbPet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jfmData, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcbMedico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jbNovoServico)
                    .addComponent(jbRemoverServico))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcbNovo)
                    .addComponent(jbSalvar)
                    .addComponent(jbFechar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcbMedicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbMedicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcbMedicoActionPerformed

    private void jbNovoServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoServicoActionPerformed
        // 1. Instancia o diálogo de serviço (ServicoView)
        ServicoView dialogServico = new ServicoView();
        
        // 2. Adiciona ServicoView ao JDesktopPane da janela principal
        javax.swing.JDesktopPane desktopPane = getDesktopPane();
        if (desktopPane != null) {
            desktopPane.add(dialogServico);
        } else {
            JOptionPane.showMessageDialog(this, "Esta view deve ser aberta dentro de um JDesktopPane.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 3. Torna a view de serviço visível e a traz para frente
        dialogServico.setVisible(true);
        try {
            dialogServico.setSelected(true);
            dialogServico.toFront();
        } catch (java.beans.PropertyVetoException e) {
            e.printStackTrace();
        }
        
        // 4. Lógica de retorno para JInternalFrame: usa PropertyChangeListener
        // Adiciona um listener para detectar quando a janela é fechada
        dialogServico.addPropertyChangeListener(propertyChangeEvent -> { // 'propertyChangeEvent' para evitar conflito com 'evt'
            if (propertyChangeEvent.getPropertyName().equals("closed") && ((Boolean) propertyChangeEvent.getNewValue())) {
                ServicosModel servicoAdicionado = dialogServico.getServicoAdicionado();
                if (servicoAdicionado != null) {
                    listaServicosTemporarios.add(servicoAdicionado); // Adiciona o serviço à lista temporária
                    preencherTabelaServicosTemporarios(); // Atualiza a tabela
                }
            }
        });
    }//GEN-LAST:event_jbNovoServicoActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jcbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbNovoActionPerformed
        limparCamposAtendimento();
        listaServicosTemporarios.clear(); // Limpa serviços temporários ao iniciar novo atendimento
        preencherTabelaServicosTemporarios(); // Atualiza a tabela para mostrar vazio
        
        jtxCodigo.setEditable(false); // ID é auto-incremento, não editável
        jcbPet.setEnabled(true);
        jcbMedico.setEnabled(true);
        jfmData.setEditable(true); // Habilita o campo de data
        jComboBox1.setEnabled(true); // Status
        jtaMotivo.setEditable(true);
        jtaDiagnostico.setEditable(true);
        
        jbNovoServico.setEnabled(true); // Habilita adicionar novos serviços
        jbRemoverServico.setEnabled(true); // Habilita remover serviços
        
        jbSalvar.setEnabled(true);
        jbFechar.setEnabled(true); // Habilita fechar
        jcbNovo.setEnabled(false); // Desabilita o próprio botão Novo
        
        // Preenche a data/hora atual (DD/MM/AAAA HH:MM)
        jfmData.setText(dateFormatEntrada.format(new Date()));
        
    }//GEN-LAST:event_jcbNovoActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        // Obter os IDs de Pet e Médico selecionados
        String nomePetSelecionado = (String) jcbPet.getSelectedItem();
        int petId = 0;
        if (nomePetSelecionado != null && listaPets != null && !nomePetSelecionado.equals("Selecione um Pet")) {
            for (PetsModel p : listaPets) {
                if (p.getNome().equals(nomePetSelecionado)) {
                    petId = p.getPetId();
                    break;
                }
            }
        }
        
        String nomeMedicoSelecionado = (String) jcbMedico.getSelectedItem();
        int medicoId = 0;
        if (nomeMedicoSelecionado != null && listaMedicos != null && !nomeMedicoSelecionado.equals("Selecione um Médico")) {
            for (MedicoModel m : listaMedicos) { // Tipo MedicoModel
                if (m.getNome().equals(nomeMedicoSelecionado)) {
                    medicoId = m.getIdMedico();
                    break;
                }
            }
        }

        String dataHoraStr = jfmData.getText();
        String status = (String) jComboBox1.getSelectedItem();
        String motivoVisita = jtaMotivo.getText();
        String diagnosticoFinal = jtaDiagnostico.getText();

        // Validações
        if (petId == 0 || medicoId == 0 || dataHoraStr.isEmpty() || status == null || status.equals("Selecione o Status") || motivoVisita.isEmpty() || diagnosticoFinal.isEmpty() || listaServicosTemporarios.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Preencha todos os campos e adicione pelo menos um serviço!", "Erro de Validação", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        try {
            Date dataUtil = dateFormatEntrada.parse(dataHoraStr);
            
            AtendimentosModel atendimento = new AtendimentosModel();
            atendimento.setPet_id(petId);
            atendimento.setMedico_id(medicoId);
            atendimento.setData(dateFormatEntrada.format(dataUtil)); // Passa a data como String
            atendimento.setStatus(status);
            atendimento.setMotivo_visita(motivoVisita);
            atendimento.setDiagnostico_final(diagnosticoFinal);

            AtendimentosController atendimentoController = new AtendimentosController();
            
            if (atendimentoController.inserir(atendimento)) {
                int idAtendimentoGerado = 0;
                try {
                    ArrayList<AtendimentosModel> todosAtendimentos = atendimentoController.selecionarTodos();
                    if (!todosAtendimentos.isEmpty()) {
                        idAtendimentoGerado = todosAtendimentos.get(todosAtendimentos.size() - 1).getId();
                    }
                } catch (Exception ex) {
                    System.err.println("Erro ao tentar obter o ID do último atendimento: " + ex.getMessage());
                }

                if (idAtendimentoGerado == 0) {
                    JOptionPane.showMessageDialog(this, "Atendimento salvo, mas não foi possível associar os serviços (ID não obtido).", "Erro Interno", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                
                ServicosController servicosController = new ServicosController();
                boolean todosServicosSalvos = true;
                for (ServicosModel servico : listaServicosTemporarios) {
                    servico.setId_atendimento(idAtendimentoGerado); // Associa o serviço ao ID do atendimento
                    if (!servicosController.inserir(servico)) {
                        todosServicosSalvos = false;
                        break;
                    }
                }

                if (todosServicosSalvos) {
                    JOptionPane.showMessageDialog(this, "Atendimento e serviços salvos com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    limparCamposAtendimento();
                    listaServicosTemporarios.clear();
                    preencherTabelaServicosTemporarios();
                    inicializarComponentes();
                } else {
                    JOptionPane.showMessageDialog(this, "Atendimento salvo, mas houve erros ao salvar alguns serviços!", "Atenção", JOptionPane.WARNING_MESSAGE);
                }

            } else {
                JOptionPane.showMessageDialog(this, "Erro ao salvar atendimento!", "Erro", JOptionPane.ERROR_MESSAGE);
            }

        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, "Formato de data e hora inválido. Use DD/MM/AAAA HH:MM.", "Erro de Formato", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Erro de formato em algum campo numérico.", "Erro de Formato", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFecharActionPerformed
        dispose();
    }//GEN-LAST:event_jbFecharActionPerformed

    private void jtAtendimentosServicosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtAtendimentosServicosMouseClicked
        // Lógica para selecionar um serviço na tabela (se quiser editar ou remover)
    }//GEN-LAST:event_jtAtendimentosServicosMouseClicked

    private void jbRemoverServicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRemoverServicoActionPerformed
        int linhaSelecionada = jtAtendimentosServicos.getSelectedRow();
        if (linhaSelecionada != -1) {
            listaServicosTemporarios.remove(linhaSelecionada);
            preencherTabelaServicosTemporarios(); // Atualiza a tabela
        } else {
            JOptionPane.showMessageDialog(this, "Selecione um serviço para remover!", "Remover Serviço", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jbRemoverServicoActionPerformed

    // Métodos auxiliares
    //
    private void preencherComboBoxes() {
        // Pets ComboBox
        PetsController petsController = new PetsController();
        listaPets = petsController.selecionarTodos();
        DefaultComboBoxModel<String> modelPets = new DefaultComboBoxModel<>();
        modelPets.addElement("Selecione um Pet");
        if (listaPets != null) {
            for (PetsModel p : listaPets) {
                modelPets.addElement(p.getNome());
            }
        }
        jcbPet.setModel(modelPets);

        // Médicos ComboBox
        MedicoController medicosController = new MedicoController();
        listaMedicos = medicosController.selecionarTodos();
        DefaultComboBoxModel<String> modelMedicos = new DefaultComboBoxModel<>();
        modelMedicos.addElement("Selecione um Médico");
        if (listaMedicos != null) {
            for (MedicoModel m : listaMedicos) { // Tipo MedicoModel
                modelMedicos.addElement(m.getNome());
            }
        }
        jcbMedico.setModel(modelMedicos);
        
        // Status ComboBox (jComboBox1)
        DefaultComboBoxModel<String> modelStatus = new DefaultComboBoxModel<>();
        modelStatus.addElement("Selecione o Status");
        modelStatus.addElement("Pendente");
        modelStatus.addElement("Em Andamento");
        modelStatus.addElement("Concluído");
        modelStatus.addElement("Cancelado");
        jComboBox1.setModel(modelStatus); // jComboBox1 é o status
    }

    private void inicializarComponentes() {
        jtxCodigo.setText("");
        jtxCodigo.setEditable(false);

        jcbPet.setSelectedIndex(0);
        jcbPet.setEnabled(false);

        jcbMedico.setSelectedIndex(0);
        jcbMedico.setEnabled(false);

        jfmData.setText("");
        jfmData.setEditable(false);

        jComboBox1.setSelectedIndex(0);
        jComboBox1.setEnabled(false);

        jtaMotivo.setText("");
        jtaMotivo.setEditable(false);

        jtaDiagnostico.setText("");
        jtaDiagnostico.setEditable(false);

        jbNovoServico.setEnabled(false);
        jbRemoverServico.setEnabled(false);
        
        jbSalvar.setEnabled(false);
        jcbNovo.setEnabled(true);
    }

    private void limparCamposAtendimento() {
        jtxCodigo.setText("");
        jcbPet.setSelectedIndex(0);
        jcbMedico.setSelectedIndex(0);
        jfmData.setText("");
        jComboBox1.setSelectedIndex(0);
        jtaMotivo.setText("");
        jtaDiagnostico.setText("");
        listaServicosTemporarios.clear(); // Limpa a lista de serviços temporários
        preencherTabelaServicosTemporarios(); // Atualiza a tabela para mostrar vazio
    }

    private void preencherTabelaServicosTemporarios() {
        DefaultTableModel modeloTabela = (DefaultTableModel) jtAtendimentosServicos.getModel();
        modeloTabela.setRowCount(0); // Limpa a tabela

        ProcedimentoController procController = new ProcedimentoController(); // Para buscar o nome do procedimento

        for (ServicosModel servico : listaServicosTemporarios) {
            String nomeProcedimento = "Procedimento Desconhecido";
            // Busca o nome do procedimento usando o id_procedimento
            ProcedimentoModel procBusca = new ProcedimentoModel();
            procBusca.setIdProcedimento(servico.getId_procedimento());
            ProcedimentoModel procEncontrado = procController.selecionar(procBusca);
            
            if (procEncontrado != null) {
                nomeProcedimento = procEncontrado.getNome();
            }

            modeloTabela.addRow(new Object[]{
                servico.getId(), // Se tiver ID temporário ou 0, senão usar um contador
                nomeProcedimento,
                String.format("%.2f", servico.getValor_cobrado()) // Formata o valor
            });
        }
    }
    
    // Método auxiliar para encontrar Pets por nome (para salvar/editar)
    private PetsModel encontrarPetPorNome(String nome) {
        if (listaPets == null) return null;
        for (PetsModel p : listaPets) {
            if (p.getNome().equals(nome)) {
                return p;
            }
        }
        return null;
    }

    // Método auxiliar para encontrar Médicos por nome (para salvar/editar)
    private MedicoModel encontrarMedicoPorNome(String nome) { 
        if (listaMedicos == null) return null;
        for (MedicoModel m : listaMedicos) { 
            if (m.getNome().equals(nome)) {
                return m;
            }
        }
        return null;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbFechar;
    private javax.swing.JToggleButton jbNovoServico;
    private javax.swing.JButton jbRemoverServico;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JComboBox<String> jcbMedico;
    private javax.swing.JButton jcbNovo;
    private javax.swing.JComboBox<String> jcbPet;
    private javax.swing.JFormattedTextField jfmData;
    private javax.swing.JTable jtAtendimentosServicos;
    private javax.swing.JTextArea jtaDiagnostico;
    private javax.swing.JTextArea jtaMotivo;
    private javax.swing.JTextField jtxCodigo;
    // End of variables declaration//GEN-END:variables
}