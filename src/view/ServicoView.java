package view;

import controller.ProcedimentoController;
import model.ProcedimentoModel;
import model.ServicosModel;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author italo (Adaptado por Gemini para ServicoView JInternalFrame)
 */
public class ServicoView extends javax.swing.JInternalFrame {

    private ServicosModel servicoAdicionado;
    private ArrayList<ProcedimentoModel> listaProcedimentos; // Armazena a lista completa de procedimentos

    /**
     * Creates new form ServicoView
     */
    public ServicoView() {
        initComponents();
        listaProcedimentos = new ArrayList<>(); // Inicializa a lista
        preencherComboProcedimentos();
        servicoAdicionado = null;
    }

    public ServicosModel getServicoAdicionado() {
        return servicoAdicionado;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jcbProcedimento = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jtxValorCobrado = new javax.swing.JTextField();
        jbAdicionar = new javax.swing.JButton();
        jbFechar = new javax.swing.JButton();

        jLabel1.setText("Procedimento");

        jcbProcedimento.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Valor Cobrado");

        jbAdicionar.setText("Adicionar");
        jbAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAdicionarActionPerformed(evt);
            }
        });

        jbFechar.setText("Fechar");
        jbFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFecharActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcbProcedimento, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jtxValorCobrado, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(202, 202, 202)
                        .addComponent(jbAdicionar)
                        .addGap(34, 34, 34)
                        .addComponent(jbFechar)))
                .addContainerGap(599, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jcbProcedimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtxValorCobrado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbAdicionar)
                    .addComponent(jbFechar))
                .addContainerGap(544, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAdicionarActionPerformed
        String nomeProcedimentoSelecionado = (String) jcbProcedimento.getSelectedItem();
        
        if (nomeProcedimentoSelecionado == null || nomeProcedimentoSelecionado.equals("Selecione um procedimento") || jtxValorCobrado.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Selecione um procedimento e informe o valor!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        ProcedimentoModel procSelecionado = encontrarProcedimentoPorNome(nomeProcedimentoSelecionado);
        
        if (procSelecionado == null) {
            JOptionPane.showMessageDialog(this, "Procedimento selecionado não encontrado. Tente novamente.", "Erro Interno", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            float valorCobrado = Float.parseFloat(jtxValorCobrado.getText());
            if (valorCobrado < 0) {
                 JOptionPane.showMessageDialog(this, "Valor cobrado não pode ser negativo!", "Erro", JOptionPane.ERROR_MESSAGE);
                 return;
            }

            ServicosModel novoServico = new ServicosModel();
            novoServico.setId_procedimento(procSelecionado.getIdProcedimento());
            novoServico.setValor_cobrado(valorCobrado);
            
            servicoAdicionado = novoServico;
            this.dispose();
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Valor cobrado inválido. Digite um número válido!", "Erro de Formato", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbAdicionarActionPerformed

    private void jbFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFecharActionPerformed
        servicoAdicionado = null;
        this.dispose(); 
    }//GEN-LAST:event_jbFecharActionPerformed

    private void jcbProcedimentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbProcedimentoActionPerformed
        String nomeProcedimentoSelecionado = (String) jcbProcedimento.getSelectedItem();
        
        if (nomeProcedimentoSelecionado != null && !nomeProcedimentoSelecionado.equals("Selecione um procedimento")) {
            ProcedimentoModel procSelecionado = encontrarProcedimentoPorNome(nomeProcedimentoSelecionado);
            if (procSelecionado != null) {
                jtxValorCobrado.setText(String.valueOf(procSelecionado.getValorPadrao()));
            } else {
                jtxValorCobrado.setText("");
            }
        } else {
            jtxValorCobrado.setText("");
        }
    }//GEN-LAST:event_jcbProcedimentoActionPerformed

    // Método para preencher o JComboBox de Procedimentos
    private void preencherComboProcedimentos() {
        ProcedimentoController controller = new ProcedimentoController();
        listaProcedimentos = controller.selecionarTodos(); // Armazena a lista completa
        
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Selecione um procedimento"); // Item inicial
        
        for (ProcedimentoModel p : listaProcedimentos) {
            model.addElement(p.getNome()); // Adiciona apenas o nome
        }
        jcbProcedimento.setModel(model);
    }
    
    // NOVO MÉTODO: Para encontrar o ProcedimentoModel completo pelo nome
    private ProcedimentoModel encontrarProcedimentoPorNome(String nome) {
        for (ProcedimentoModel p : listaProcedimentos) {
            if (p.getNome().equals(nome)) {
                return p;
            }
        }
        return null; // Não encontrado
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton jbAdicionar;
    private javax.swing.JButton jbFechar;
    private javax.swing.JComboBox<String> jcbProcedimento;
    private javax.swing.JTextField jtxValorCobrado;
    // End of variables declaration//GEN-END:variables
}